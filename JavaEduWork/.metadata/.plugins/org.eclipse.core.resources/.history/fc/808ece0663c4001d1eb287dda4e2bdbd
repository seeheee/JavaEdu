package com.edu.test;
/*
 * 인터페이스
 * ::
 * 구성요소
 * (public abstract) 추상메소드;
 * (public static final) 상수;
 * ::
 * 구현부가 있는 기능이 올 수 없다.
 * 필드가 없다.
 * 객체 생성의 대상이 될 수 없다.(abstract...)
 * 객체 생성 시 타입으로서 존재
 * 
 */
interface Flyer{
	int MAX_SPEED = 200; //(public static final) default
	public abstract void fly();
	void land();
	void take_off();
}

class Bird implements Flyer{

	@Override
	public void fly() {
		System.out.println("Bird Fly");
		
	}

	@Override
	public void land() {
		System.out.println("Bird land");
		
	}

	@Override
	public void take_off() {
		System.out.println("Bird take_off");
		
	}
	
	public String layEggs() {
		return "새가 알을 낳다";
	}
	
}

class Superman implements Flyer{

	@Override
	public void fly() {
		System.out.println("Superman Fly");
		
	}

	@Override
	public void land() {
		System.out.println("Superman land");
		
	}

	@Override
	public void take_off() {
		System.out.println("Superman take_off");
		
	}
	
	public String stop_Bullet() {
		return "망또로 총알을 막다.";
	}
}

public class InterfaceTest {

	public static void main(String[] args) {
		// abstract method가 하나라도 있으면 미완의 설계도이기에 객체생성 안함.
//		Flyer f= new Fly();
		
		Flyer bird = new Bird(); //부모타입으로 자식 생성 = 다형성
		Flyer man = new Superman();
		
		bird.fly();
		bird.land();
		bird.take_off();
		((Bird) bird).layEggs();

	}

}
